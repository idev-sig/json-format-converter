#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const LOCALES_DIR = path.join(__dirname, '../src/_locales');

// Missing translation keys that need to be added
const missingKeys = {
    'en': {
        'clear': 'Clear',
        'example': 'Example',
        'minify': 'Minify',
        'sortKeys': 'Sort Keys',
        'order': 'Order',
        'orderAsc': 'A-Z',
        'orderDesc': 'Z-A',
        'deepSort': 'Deep Sort',
        'indent': 'Indent',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'Input',
        'output': 'Output'
    },
    'zh_CN': {
        'clear': 'Ê∏ÖÁ©∫',
        'example': 'Á§∫‰æã',
        'minify': 'ÂéãÁº©',
        'sortKeys': 'ÊéíÂ∫èÈîÆ',
        'order': 'È°∫Â∫è',
        'orderAsc': 'A-Z',
        'orderDesc': 'Z-A',
        'deepSort': 'Ê∑±Â∫¶ÊéíÂ∫è',
        'indent': 'Áº©Ëøõ',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'ËæìÂÖ•',
        'output': 'ËæìÂá∫'
    },
    'zh_TW': {
        'clear': 'Ê∏ÖÁ©∫',
        'example': 'Á§∫‰æã',
        'minify': 'Â£ìÁ∏Æ',
        'sortKeys': 'ÊéíÂ∫èÈçµ',
        'order': 'È†ÜÂ∫è',
        'orderAsc': 'A-Z',
        'orderDesc': 'Z-A',
        'deepSort': 'Ê∑±Â∫¶ÊéíÂ∫è',
        'indent': 'Á∏ÆÊéí',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'Ëº∏ÂÖ•',
        'output': 'Ëº∏Âá∫'
    },
    'ko': {
        'clear': 'ÏßÄÏö∞Í∏∞',
        'example': 'ÏòàÏ†ú',
        'minify': 'ÏïïÏ∂ï',
        'sortKeys': 'ÌÇ§ Ï†ïÎ†¨',
        'order': 'ÏàúÏÑú',
        'orderAsc': 'A-Z',
        'orderDesc': 'Z-A',
        'deepSort': 'ÍπäÏùÄ Ï†ïÎ†¨',
        'indent': 'Îì§Ïó¨Ïì∞Í∏∞',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'ÏûÖÎ†•',
        'output': 'Ï∂úÎ†•'
    },
    'ja': {
        'clear': '„ÇØ„É™„Ç¢',
        'example': '‰æã',
        'minify': 'ÂúßÁ∏Æ',
        'sortKeys': '„Ç≠„Éº„ÇΩ„Éº„Éà',
        'order': 'È†ÜÂ∫è',
        'orderAsc': 'A-Z',
        'orderDesc': 'Z-A',
        'deepSort': 'Ê∑±„ÅÑ„ÇΩ„Éº„Éà',
        'indent': '„Ç§„É≥„Éá„É≥„Éà',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'ÂÖ•Âäõ',
        'output': 'Âá∫Âäõ'
    },
    'pt_BR': {
        'clear': 'Limpar',
        'example': 'Exemplo',
        'minify': 'Minificar',
        'sortKeys': 'Ordenar Chaves',
        'order': 'Ordem',
        'orderAsc': 'A-Z',
        'orderDesc': 'Z-A',
        'deepSort': 'Ordena√ß√£o Profunda',
        'indent': 'Indenta√ß√£o',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'Entrada',
        'output': 'Sa√≠da'
    },
    'fr': {
        'clear': 'Effacer',
        'example': 'Exemple',
        'minify': 'Minifier',
        'sortKeys': 'Trier les Cl√©s',
        'order': 'Ordre',
        'orderAsc': 'A-Z',
        'orderDesc': 'Z-A',
        'deepSort': 'Tri Profond',
        'indent': 'Indentation',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'Entr√©e',
        'output': 'Sortie'
    },
    'de': {
        'clear': 'L√∂schen',
        'example': 'Beispiel',
        'minify': 'Minimieren',
        'sortKeys': 'Schl√ºssel sortieren',
        'order': 'Reihenfolge',
        'orderAsc': 'A-Z',
        'orderDesc': 'Z-A',
        'deepSort': 'Tiefe Sortierung',
        'indent': 'Einr√ºckung',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'Eingabe',
        'output': 'Ausgabe'
    },
    'ru': {
        'clear': '–û—á–∏—Å—Ç–∏—Ç—å',
        'example': '–ü—Ä–∏–º–µ—Ä',
        'minify': '–ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å',
        'sortKeys': '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏',
        'order': '–ü–æ—Ä—è–¥–æ–∫',
        'orderAsc': '–ê-–Ø',
        'orderDesc': '–Ø-–ê',
        'deepSort': '–ì–ª—É–±–æ–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞',
        'indent': '–û—Ç—Å—Ç—É–ø',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': '–í–≤–æ–¥',
        'output': '–í—ã–≤–æ–¥'
    },
    'es': {
        'clear': 'Limpiar',
        'example': 'Ejemplo',
        'minify': 'Minificar',
        'sortKeys': 'Ordenar Claves',
        'order': 'Orden',
        'orderAsc': 'A-Z',
        'orderDesc': 'Z-A',
        'deepSort': 'Ordenaci√≥n Profunda',
        'indent': 'Sangr√≠a',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'Entrada',
        'output': 'Salida'
    },
    'ar': {
        'clear': 'ŸÖÿ≥ÿ≠',
        'example': 'ŸÖÿ´ÿßŸÑ',
        'minify': 'ÿ∂ÿ∫ÿ∑',
        'sortKeys': 'ÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠',
        'order': 'ÿ™ÿ±ÿ™Ÿäÿ®',
        'orderAsc': 'ÿ£-Ÿä',
        'orderDesc': 'Ÿä-ÿ£',
        'deepSort': 'ÿ™ÿ±ÿ™Ÿäÿ® ÿπŸÖŸäŸÇ',
        'indent': 'ŸÖÿ≥ÿßŸÅÿ© ÿ®ÿßÿØÿ¶ÿ©',
        'indent2': '2',
        'indent4': '4',
        'indentTab': 'Tab',
        'input': 'ÿ•ÿØÿÆÿßŸÑ',
        'output': 'ÿ•ÿÆÿ±ÿßÿ¨'
    }
};

// Process each language
Object.entries(missingKeys).forEach(([lang, keys]) => {
    const filePath = path.join(LOCALES_DIR, lang, 'messages.json');
    
    if (fs.existsSync(filePath)) {
        try {
            const content = fs.readFileSync(filePath, 'utf8');
            const messages = JSON.parse(content);
            
            let added = 0;
            Object.entries(keys).forEach(([key, message]) => {
                if (!messages[key]) {
                    messages[key] = {
                        "message": message,
                        "description": `${key} button/label`
                    };
                    added++;
                }
            });
            
            if (added > 0) {
                // Write back with proper formatting
                const updatedContent = JSON.stringify(messages, null, 2);
                fs.writeFileSync(filePath, updatedContent, 'utf8');
                console.log(`‚úÖ Added ${added} missing keys to ${lang}`);
            } else {
                console.log(`‚ö†Ô∏è  No missing keys in ${lang}`);
            }
        } catch (error) {
            console.error(`‚ùå Error processing ${lang}:`, error.message);
        }
    } else {
        console.log(`‚ö†Ô∏è  File not found: ${filePath}`);
    }
});

console.log('üéâ Missing keys addition completed!');
